#!/bin/bash

##

## checking args
if [ $# -ne 3 ]
then
  echo "Usage: $0 USER_EMAIL USER_PASSWORD DISPATCHER_ADDRESS"
  exit 1
fi

# args
readonly USER_EMAIL=${1}
readonly USER_PASSWORD=${2}
readonly DISPATCHER_ADDRESS=${3}

readonly SANDBOX=$(cd "$(dirname "${0}")" && pwd)
readonly SUBMIT_TASK_SCRIPT=${SANDBOX}/submit-task
readonly GET_TASK_BY_ID_SCRIPT=${SANDBOX}/get-task-by-id
readonly GET_TASK_LINKS_SCRIPT=${SANDBOX}/get-task-links
readonly SYSTEMTEST_MD5SUM_RESULTS_FILE=${SANDBOX}/../resources/systemtest-md5sum-results

get_timestamp(){
  TIMESTAMP=$(date +"%T")
  echo "${TIMESTAMP}"
}

get_timesleep(){
  local TEST_CASE=${1}

  if [ ${TEST_CASE} == 'nop' ]; then
    echo "30"
  elif [ ${TEST_CASE} == 'nop-fake-files' ]; then
    echo "60"
  elif [ ${TEST_CASE} == 'nop-download-files' ]; then
    echo "120"
  else
    echo "300"
  fi
}

get_task_by_id(){
  local ID=${1}
  local TASK=$(bash ${GET_TASK_BY_ID_SCRIPT} ${USER_EMAIL} ${USER_PASSWORD} ${ID} ${DISPATCHER_ADDRESS})

  echo "${TASK}"
}

get_dataset(){
  # This function is responsible for receiving information from a SAPS task and getting its dataset.
  # Dataset says what type of satellite that image belongs to.
  # The output of this function is formatted for lower case and the initial and final quotation marks are removed.
  local TASK=${1}
  local DATASET=$(echo ${TASK} | jq '.dataset' | tr -d \" | tr '[:upper:]' '[:lower:]')

  echo "${DATASET}"
}

get_state(){
  # This function receives information from a SAPS task and obtains the processing status it is in.
  # There is a flow in which a task follows, which is:
  # created -> downloading -> downloaded -> preprocessing -> ready -> running -> finished -> archiving -> archived
  # In any of the transitions errors can occur and go to the 'failed' state
  # The output of this function is formatted for lower case and the initial and final quotation marks are removed.
  local	TASK=${1}
  local STATE=$(echo ${TASK} | jq '.state' | tr -d \" | tr '[:upper:]' '[:lower:]')

  echo "${STATE}"
}

assert(){
  local ID=${1}
  local TEST_CASE=${2}
  local TASK=$(get_task_by_id ${ID})
  local STATE=$(get_state "${TASK}")
  local DATASET=$(get_dataset "${TASK}")

  echo "($(get_timestamp)) [${TEST_CASE}] Checking task situation [${ID}]..."

  if [[ ${TEST_CASE} == 'endtoend-test' && ${DATASET} == 'landsat_7' ]]; then
    echo "($(get_timestamp)) [${TEST_CASE}] Test failure, but this is expected."
  elif [[ ${STATE} == 'archived' ]]; then
    echo "($(get_timestamp)) [${TEST_CASE}] Successful test."
    check_files ${ID} ${TEST_CASE}
  else
    echo "($(get_timestamp)) [${TEST_CASE}] Test failure."
    exit 1
  fi
}

check_files(){
  local ID=${1}
  local TEST_CASE=${2}

  if [[ ${TEST_CASE} == 'endtoend-test' ]]; then
    check_md5sum_files ${ID} ${TEST_CASE}
  else
    echo "($(get_timestamp)) [${TEST_CASE}] The ${TEST_CASE} version does not need to check the files."
  fi
}

check_tasks(){
  local TASK_IDS=${1}
  local TEST_CASE=${2}
  local TIMESLEEP=$(get_timesleep ${TEST_CASE})

  echo "($(get_timestamp)) [${TEST_CASE}] Checking submitted tasks..."

  for ID in $(echo "${TASK_IDS}" | jq ".[]" | tr -d \")
  do
    while true; do
       local TASK=$(get_task_by_id ${ID})
       local STATE=$(get_state "${TASK}")

       echo "($(get_timestamp)) [${TEST_CASE}] Current task state [${ID}]: ${STATE}"       
       if [ ${STATE} == 'archived' -o ${STATE} == 'failed' ]; then
         echo "($(get_timestamp)) [${TEST_CASE}] Task [${ID}] has finished processing."
         assert ${ID} ${TEST_CASE}
         break
       fi
       echo "($(get_timestamp)) [${TEST_CASE}] Waiting ${TIMESLEEP} seconds to check again..."
       sleep ${TIMESLEEP}
    done
  done
}

submit_task(){
  local TEST_CASE=${1}
  
  bash ${SUBMIT_TASK_SCRIPT} ${USER_EMAIL} ${USER_PASSWORD} -7.413 -7.047 -37.314 -36.257 2015-06-23 2015-06-23 ${TEST_CASE} ${TEST_CASE} ${TEST_CASE} ${DISPATCHER_ADDRESS}
}

get_links(){
  local ID=${1}

  bash ${GET_TASK_LINKS_SCRIPT} ${USER_EMAIL} ${USER_PASSWORD} ${ID} ${DISPATCHER_ADDRESS}
}

get_name(){
  local LINK=${1}
  local NAME=$(echo ${LINK} | cut -d "*" -f1)

  echo "${NAME}"
}

get_url(){
  local LINK=${1}
  local URL=$(echo ${LINK} | cut -d "*" -f2)

  echo "${URL}"
}

get_md5sum(){
  # This function receives a URL of a file processed from a SAPS task and calculates md5sum,
  # without downloading the file, using the curl aligned with the md5sum command.
  # Input example:
  #   get_md5sum <url_file>
  # Output example:
  #   3de5943c4c9e5047ff2318829ad65f4d
  local ULR=${1}
  MD5SUM=$(curl --silent "${URL}" | md5sum | awk '{print $1}')

  echo "${MD5SUM}"
}

check_md5sum_files(){
  local ID=${1}
  local TEST_CASE=${2}

  echo "($(get_timestamp)) [${TEST_CASE}] Checking md5sum of task files [${ID}]..."
  LINKS=$(get_links ${ID})

  # This loop creates an iteration on top of a list created with '[<filename1>*<file_url1>, <filename2>*<file_url2>, ...]' (without quotes)
  #   Looks for the filename is one of the files to be checked with md5sum analyzing the file ${SYSTEMTEST_MD5SUM_RESULTS_FILE}
  #   If the current filename needs to be checked, then
  #     Assert that the file md5sum of the processing done is the same as the expected md5sum
  #     Otherwise, fail the script with exit 2
  for NAME_URL in $(echo $LINKS | jq '[ .[] | (.name + "*" + .url) ]' | jq '.[]' | tr -d \"); do
    NAME=$(get_name $NAME_URL)
    URL=$(get_url $NAME_URL)
    FILENAME=$(basename $NAME)

    RESULT=$(grep ${FILENAME} ${SYSTEMTEST_MD5SUM_RESULTS_FILE})
    EXIT_CODE=$?
  
    if [[ "$EXIT_CODE" == "0" ]]; then
      MD5SUM=$(curl --silent "$URL" | md5sum | awk '{print $1}')
      MD5SUM=${MD5SUM##*()}
      MD5SUM=${MD5SUM%%*()}
      EXCEPTED_MD5SUM=$(echo $RESULT | awk '{print $1}')
      EXCEPTED_MD5SUM=${EXCEPTED_MD5SUM##*()}
      EXCEPTED_MD5SUM=${EXCEPTED_MD5SUM%%*()}
      if [[ "Z$MD5SUM" -eq "Z$EXPECTED_MD5SUM" ]] ; then
        echo "($(get_timestamp)) [${TEST_CASE}] ${FILENAME} file a has expected md5sum."
      else
        echo "($(get_timestamp)) [${TEST_CASE}] ${FILENAME} file wrong md5sum. $EXCEPTED_MD5SUM was excepted, $MD5SUM was presented."
        exit 2
      fi
    fi

  done
}

run_test(){
  local TEST_CASE=${1}

  echo "($(get_timestamp)) Run ${TEST_CASE} version"

  echo "($(get_timestamp)) [${TEST_CASE}] Submitting tasks...";
  local TASK_IDS=$(submit_task ${TEST_CASE})
  echo "($(get_timestamp)) [${TEST_CASE}] Task ID list: $TASK_IDS"

  check_tasks "${TASK_IDS}" ${TEST_CASE}
}

echo "($(get_timestamp)) Run NOP tests..."
run_test nop
run_test nop-fake-files
run_test nop-download-files

echo "($(get_timestamp)) Run end to end test..."
run_test endtoend-test

echo "($(get_timestamp)) Systemtest completed successfully !"
exit 0
